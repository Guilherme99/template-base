[{"/home/guilherme99/Área de Trabalho/template-base/src/index.tsx":"1","/home/guilherme99/Área de Trabalho/template-base/src/App.tsx":"2","/home/guilherme99/Área de Trabalho/template-base/src/routes/index.tsx":"3","/home/guilherme99/Área de Trabalho/template-base/src/pages/Home/index.tsx":"4","/home/guilherme99/Área de Trabalho/template-base/src/pages/SignIn/index.tsx":"5","/home/guilherme99/Área de Trabalho/template-base/src/routes/Routes.tsx":"6","/home/guilherme99/Área de Trabalho/template-base/src/hooks/auth.tsx":"7","/home/guilherme99/Área de Trabalho/template-base/src/services/api.ts":"8","/home/guilherme99/Área de Trabalho/template-base/src/components/Input/index.tsx":"9","/home/guilherme99/Área de Trabalho/template-base/src/components/Button/index.tsx":"10","/home/guilherme99/Área de Trabalho/template-base/src/components/Button/styles.ts":"11","/home/guilherme99/Área de Trabalho/template-base/src/pages/SignIn/styles.ts":"12","/home/guilherme99/Área de Trabalho/template-base/src/components/Input/styles.ts":"13","/home/guilherme99/Área de Trabalho/template-base/src/styles/global.ts":"14","/home/guilherme99/Área de Trabalho/template-base/src/hooks/index.tsx":"15","/home/guilherme99/Área de Trabalho/template-base/src/pages/Home/styles.ts":"16","/home/guilherme99/Área de Trabalho/template-base/src/components/Mensagem/index.js":"17","/home/guilherme99/Área de Trabalho/template-base/src/hooks/toast.tsx":"18","/home/guilherme99/Área de Trabalho/template-base/src/utils/getValidationErrors.ts":"19","/home/guilherme99/Área de Trabalho/template-base/src/components/ToastContainer/index.tsx":"20","/home/guilherme99/Área de Trabalho/template-base/src/components/ToastContainer/styles.ts":"21","/home/guilherme99/Área de Trabalho/template-base/src/components/ToastContainer/Toast/index.tsx":"22","/home/guilherme99/Área de Trabalho/template-base/src/components/ToastContainer/Toast/styles.ts":"23","/home/guilherme99/Área de Trabalho/template-base/src/components/Navbar/index.tsx":"24","/home/guilherme99/Área de Trabalho/template-base/src/components/Navbar/SidebarData.js":"25","/home/guilherme99/Área de Trabalho/template-base/src/components/Navbar/styles.ts":"26","/home/guilherme99/Área de Trabalho/template-base/src/pages/Forgoted/index.tsx":"27","/home/guilherme99/Área de Trabalho/template-base/src/pages/Forgoted/styles.ts":"28","/home/guilherme99/Área de Trabalho/template-base/src/pages/SignUp/index.tsx":"29","/home/guilherme99/Área de Trabalho/template-base/src/pages/SignUp/styles.ts":"30","/home/guilherme99/Área de Trabalho/template-base/src/pages/Historic/index.tsx":"31","/home/guilherme99/Área de Trabalho/template-base/src/pages/Historic/styles.ts":"32","/home/guilherme99/Área de Trabalho/template-base/src/components/Loading/index.tsx":"33","/home/guilherme99/Área de Trabalho/template-base/src/components/Loading/Loading.tsx":"34","/home/guilherme99/Área de Trabalho/template-base/src/pages/ProfileUser/index.tsx":"35","/home/guilherme99/Área de Trabalho/template-base/src/pages/ProfileUser/styles.ts":"36","/home/guilherme99/Área de Trabalho/template-base/src/components/Tooltip/index.tsx":"37","/home/guilherme99/Área de Trabalho/template-base/src/components/Tooltip/styles.ts":"38","/home/guilherme99/Área de Trabalho/template-base/src/pages/Update/index.tsx":"39","/home/guilherme99/Área de Trabalho/template-base/src/pages/Update/styles.ts":"40","/home/guilherme99/Área de Trabalho/template-base/src/pages/Welcome/index.tsx":"41","/home/guilherme99/Área de Trabalho/template-base/src/pages/Welcome/styles.ts":"42"},{"size":165,"mtime":1611510021092,"results":"43","hashOfConfig":"44"},{"size":355,"mtime":1615661714667,"results":"45","hashOfConfig":"44"},{"size":1078,"mtime":1616432433861,"results":"46","hashOfConfig":"44"},{"size":12741,"mtime":1616265029412,"results":"47","hashOfConfig":"44"},{"size":3918,"mtime":1616458469881,"results":"48","hashOfConfig":"44"},{"size":799,"mtime":1616181313644,"results":"49","hashOfConfig":"44"},{"size":2452,"mtime":1616032312947,"results":"50","hashOfConfig":"44"},{"size":138,"mtime":1615907186680,"results":"51","hashOfConfig":"44"},{"size":1557,"mtime":1616290173660,"results":"52","hashOfConfig":"44"},{"size":338,"mtime":1610935386162,"results":"53","hashOfConfig":"44"},{"size":385,"mtime":1610935386162,"results":"54","hashOfConfig":"44"},{"size":1866,"mtime":1616354550740,"results":"55","hashOfConfig":"44"},{"size":1203,"mtime":1616290421687,"results":"56","hashOfConfig":"44"},{"size":672,"mtime":1616450348136,"results":"57","hashOfConfig":"44"},{"size":272,"mtime":1610935386166,"results":"58","hashOfConfig":"44"},{"size":10877,"mtime":1616450701410,"results":"59","hashOfConfig":"44"},{"size":389,"mtime":1615930568524,"results":"60","hashOfConfig":"44"},{"size":1452,"mtime":1615916605827,"results":"61","hashOfConfig":"44"},{"size":323,"mtime":1615915971340,"results":"62","hashOfConfig":"44"},{"size":792,"mtime":1615915399931,"results":"63","hashOfConfig":"44"},{"size":162,"mtime":1610935386166,"results":"64","hashOfConfig":"44"},{"size":1392,"mtime":1610935386166,"results":"65","hashOfConfig":"44"},{"size":1404,"mtime":1616012674902,"results":"66","hashOfConfig":"44"},{"size":2674,"mtime":1616285715109,"results":"67","hashOfConfig":"44"},{"size":1032,"mtime":1616356906077,"results":"68","hashOfConfig":"44"},{"size":2273,"mtime":1616013221546,"results":"69","hashOfConfig":"44"},{"size":3333,"mtime":1616032348256,"results":"70","hashOfConfig":"44"},{"size":1559,"mtime":1616031182569,"results":"71","hashOfConfig":"44"},{"size":8251,"mtime":1616458210510,"results":"72","hashOfConfig":"44"},{"size":3309,"mtime":1616457982779,"results":"73","hashOfConfig":"44"},{"size":10957,"mtime":1616283222079,"results":"74","hashOfConfig":"44"},{"size":13061,"mtime":1616450733878,"results":"75","hashOfConfig":"44"},{"size":61,"mtime":1616264774302,"results":"76","hashOfConfig":"44"},{"size":296,"mtime":1616264820177,"results":"77","hashOfConfig":"44"},{"size":5093,"mtime":1616458645520,"results":"78","hashOfConfig":"44"},{"size":1501,"mtime":1616374546082,"results":"79","hashOfConfig":"44"},{"size":355,"mtime":1610935386166,"results":"80","hashOfConfig":"44"},{"size":1451,"mtime":1616353603695,"results":"81","hashOfConfig":"44"},{"size":7973,"mtime":1616431990968,"results":"82","hashOfConfig":"44"},{"size":2856,"mtime":1616375689662,"results":"83","hashOfConfig":"44"},{"size":1806,"mtime":1616443922547,"results":"84","hashOfConfig":"44"},{"size":8544,"mtime":1616450027179,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1d5g9bo",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"123"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"123"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"88"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"152","messages":"153","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"88"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/guilherme99/Área de Trabalho/template-base/src/index.tsx",[],["178","179"],"/home/guilherme99/Área de Trabalho/template-base/src/App.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/routes/index.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/pages/Home/index.tsx",["180","181"],"import React, {useEffect, useState} from 'react';\nimport {Styles} from './styles';\nimport axio from 'axios'\nimport 'react-image-crop/dist/ReactCrop.css';\nimport ReactCrop from 'react-image-crop';\nimport \"semantic-ui-css/semantic.min.css\";\nimport { TiCloudStorage} from \"react-icons/ti\";\nimport { FaTrashAlt, FaSearch,FaCheckCircle} from \"react-icons/fa\";\nimport Mensagem from '../../components/Mensagem/index'; \nimport HeaderLogin from '../../components/Navbar';\nimport Loading from '../../components/Loading';\n\nimport { useToast } from '../../hooks/toast';\n\ninterface propMatriz {\n  img: string,\n  status: boolean,\n  idprocesso: string,\n  descricao: string,\n  acuracia: string\n}\n\nconst Home = ()=> {\n\n   /*  const  [imagem, setImage] = useState(null); */\n\n    const { addToast } = useToast();\n\n    const  [matriz, setMatriz] = useState<Array <propMatriz>>([]);\n    const  [imgRef, setImgRef] = useState(null);\n    const  [imgNew, setImgNew] = useState('');\n    const  [src, setSrc] = useState<string | null>(null);\n    const  [loading, setLoading] = useState<boolean>(false);\n    const  [crop, setCrop] = useState({\n      unit: 'px' as any,\n      width: 250,\n      height: 250,\n      maxWidth: 356 as any,\n      maxHeight: 356 as any\n    });\n\n    useEffect(() => {\n        setLoading(true);\n        \n        setTimeout(() => {\n          setLoading(false);\n        },1500)      \n      /* return () => {\n        cleanup\n      } */\n    }, []);\n\n    const onSelectFile = (e:any) => {\n      e.preventDefault();\n      if (e.target.files && e.target.files.length > 0) {\n        const reader = new FileReader();\n        reader.addEventListener('load', () =>\n          setSrc(reader?.result as any)\n        );\n        reader.readAsDataURL(e.target.files[0]);\n      }\n    };\n  \n    const onImageLoaded = (image:any) => {\n    \n      setImgRef(image);\n    };\n  \n    const onCropComplete = (crop:any) => {\n      makeClientCrop(crop);\n    };\n  \n    const onCropChange = (crop:any, percentCrop:any) => {\n      setCrop(crop)\n    };\n  \n    const makeClientCrop = async (crop:any) => {\n      if (imgRef && crop.width && crop.height) {\n        const croppedImageUrl = await getCroppedImg(\n          imgRef,\n          crop,\n          'newFile.jpeg'\n        );\n        setImgNew(croppedImageUrl as any);\n      }\n    }\n  \n    const getCroppedImg  =  (image:any, crop:any, fileName:any) => {\n      const canvas = document.createElement('canvas');\n      const scaleX = image.naturalWidth / image.width;\n      const scaleY = image.naturalHeight / image.height;\n      canvas.width = crop.width;\n      canvas.height = crop.height;\n      const ctx = canvas.getContext('2d');\n  \n      ctx?.drawImage(\n        image,\n        crop.x * scaleX,\n        crop.y * scaleY,\n        crop.width * scaleX,\n        crop.height * scaleY,\n        0,\n        0,\n        crop.width,\n        crop.height\n      );\n  \n      return new Promise((resolve, reject) => {\n  \n          let fileUrl = canvas.toDataURL(\"image/jpg\");\n          resolve(fileUrl)\n      \n        }\n      )\n    }\n\n    const atualiza = async (img2:any,status:boolean,idprocs:string) => {\n      \n      return setMatriz([...matriz, {\n          img: img2,\n          status: status,\n          idprocesso: idprocs,\n          descricao: \"Sem descrição\",\n          acuracia: \"\"\n        } ]\n      )\n    \n  }\n  \n  const editar = (id:any, dados: any[], status:any) => {\n    setMatriz(matriz.map( (item:any) => item.idprocesso === id ? {...item, descricao:dados[1], acuracia:dados[0], status:status } : (item)));\n\n    return  addToast({\n      type: 'success',\n      title: `Item ${id}`,\n      description: 'Item identificado!',\n    });\n  }\n\n\n  const imageSlipt =  async (image:string) => {\n    let imagem = new FormData();\n  \n    var base64 = [];\n    base64 = image.split(',');\n                   \n    imagem.append('imagem_enviada_base64', base64[1]); \n    \n    return imagem;\n  \n  }\n\n  const enviarImagem = async (e:React.FormEvent) =>{\n  \n    e.preventDefault();\n    \n    if(imgNew===undefined || imgNew===''){\n      return  addToast({\n        type: 'error',\n        title: `Imagem`,\n        description: 'Selecione uma imagem com o seletor!',\n      });;\n    }\n    //console.log(imgNew);\n    \n    await axio({\n\n      method: 'POST',\n      url: 'https://identoolfier-api.herokuapp.com/app/enviar_imagem/',\n      data: await imageSlipt(imgNew),\n        headers:{\n            'content-type': 'multipart/form-data',\n            \"Authorization\": \"Token \"+localStorage.getItem(\"@LDTI:token_user\") \n         }\n    \n     }).then(res=> {        \n        \n        atualiza(imgNew, false, res.data.id_processo);\n        return  addToast({\n          type: 'success',\n          title: `Item`,\n          description: 'Item Enviado!',\n        });\n      }).catch(err=>{\n        addToast({\n          type: 'error',\n          title: `Item `,\n          description: 'Falha ao enviar!',\n        });\n    })       \n  }\n  const analisaImagem = async (event: React.FormEvent, id:any) => {\n\n    event.preventDefault();\n\n    let status;\n    status = false;\n\n    var idEnvio = new FormData();\n        \n    idEnvio.append(\"id_processo\", id);\n      \n    while(status===false){\n\n      await axio({      \n        method: 'POST',\n        url: 'https://identoolfier-api.herokuapp.com/app/analisa_imagem/',\n        data: idEnvio,\n          headers:{\n            \"Authorization\": \"Token \"+localStorage.getItem(\"@LDTI:token_user\") \n          }\n    \n      }).then(res=> {        \n        status = res.data.analisado; \n\n        if(status===true){\n\n          let dados: any[] = [];\n          dados = res.data.ferramenta_registrada.split(\":\");\n          editar(id, dados, status);  \n\n        }\n      }).catch(err=>\n        status = false\n          \n      )  \n    }\n  }\n\n  const deletarImagem = async (event: React.FormEvent, id:any) => {\n    event.preventDefault();\n      await axio({      \n        method: 'DELETE',\n        url: `https://identoolfier-api.herokuapp.com/app/apagar_registro/${id}/`,\n        headers:{\n              \"Authorization\": \"Token \"+localStorage.getItem(\"@LDTI:token_user\") \n        }\n    \n      }).then(res=> {        \n          const resul = matriz.filter(item => item.idprocesso!==id);\n          setMatriz(resul);\n          return  addToast({\n            type: 'success',\n            title: `Item`,\n            description: 'Item deletado!',\n          });\n          \n      }).catch(err=>{\n        return  addToast({\n          type: 'error',\n          title: `Item`,\n          description: 'Erro ao deletar Item!',\n        });\n      }  \n      )  \n\n  }\n  const orderMatriz = matriz.sort((a, b) => Number(b.idprocesso) - Number(a.idprocesso));\n                       \n  return (\n    \n\n    <Styles>\n        <HeaderLogin/>\n        {\n          loading? <Loading/> : \n          <div className='corpoHome'>\n              <div className='contHome'>\n                  <div className='sendImg'>\n                      <form onSubmit={enviarImagem}>\n                        <div className='input-wrapper'>\n                          <label htmlFor='input-file'>\n                            Selecionar um arquivo <TiCloudStorage />\n                          </label>\n                          <input id='input-file' type='file' accept=\"image/*\" onChange={onSelectFile} />\n                          <button className=\"btnLindo\" type=\"submit\"> Enviar </button>\n                        </div>\n                      </form>\n                      <div className=\"crop\">\n                      {src && (\n                          <ReactCrop\n                              src={src}\n                              crop={crop}\n                              ruleOfThirds\n                              onImageLoaded={onImageLoaded}\n                              onComplete={onCropComplete}\n                              onChange={onCropChange}\n                              locked={true as boolean}\n                              \n                          />\n                          )}\n                      </div>\n                  </div>\n                  \n                  <div className='artigos'>\n                                            \n                      {\n                      matriz.length===0? \n                            <Mensagem />\n                            : ''  \n                      }\n                        {\n                          matriz && \n                          orderMatriz.map( ({img, status,idprocesso, descricao, acuracia }) => \n                              <div className='contArt' key={idprocesso}>\n                                                    \n                                        <article className='cardsImg'>\n                                            <div className='colunaEsq'>\n                                                <img /* width='256px' height='256px' */ alt='Ferramenta' src={img} />\n                                                <div className=\"startfilme\">\n                                                  <h4>{descricao}</h4>\n                                                  <i className=\"icon-play icon-3x\"></i>\n                                                </div>\n                                            </div>\n                                            <div className='colunaDir'>\n                                                <label> Ferramenta:</label>\n                                                \n                                                <div className='contColDir'>\n                                                    <label className=\"campos_artigos\" htmlFor=\"status\">Status: </label>\n                                                    <label id='stts'  htmlFor=\"campo_status\">{status? \"Analisado\" : \"Não Analisado\"}</label> <br></br>\n                                                    <label className=\"campos_artigos\" htmlFor=\"desc\">Descrição: </label>\n                                                    <label id='desc' htmlFor=\"campo_desc\">{descricao}</label><br></br>\n                                                    <label htmlFor=\"acuracia\">{(acuracia!==\"\")? (\"Acurácia: \"+(Number(acuracia)*100).toFixed(2))+\" %\"  : \"\" }</label>\n                                                    <div className='btnVer'>\n                                                          <button \n                                                              id='btnLindo2' \n                                                              value={idprocesso}\n                                                              onClick={status===true? (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => () => {} : \n                                                                    (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) =>{\n                                                                      /* this.setState({idEnvio:idprocesso}); */\n                                                                      const id = idprocesso;\n                                                                      analisaImagem(event, id);\n                                                              }}\n                                                              > \n                                                              {status? `Analisada ` : `Analisar `} \n                                                              {status?  <FaCheckCircle/> : <FaSearch/> } \n                                                            </button>\n\n                                                            <button \n                                                            id='btnLindo3' \n                                                            value={idprocesso}\n                                                            onClick={(event) => {\n                                                                    const id = idprocesso;\n                                                                    deletarImagem(event, id);\n                                                            }}\n                                                            > \n                                                            Deletar <FaTrashAlt/>\n                                                            </button>\n                                                      \n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </article>\n                                    </div>\n                                )\n                          }     \n                  \n                </div>                      \n\n              </div>\n          </div>\n        }\n    </Styles>\n  \n  );\n}\n\nexport default Home;\n","/home/guilherme99/Área de Trabalho/template-base/src/pages/SignIn/index.tsx",["182"],"/home/guilherme99/Área de Trabalho/template-base/src/routes/Routes.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/hooks/auth.tsx",["183"],"import axios from 'axios';\nimport React, { createContext, useCallback, useState, useContext } from 'react';\nimport api from '../services/api';\n\ninterface AuthData {\n  token: string;\n  user: object;\n}\n\ninterface SignInCredentials {\n  username: string;\n  password: string;\n}\n\ninterface ForgotCredentials {\n  email: string;\n}\n\ninterface AuthContextData {\n  user: object;\n  signIn(credentials: SignInCredentials): Promise<void>;\n  Forgot(credentials: ForgotCredentials): Promise<void>;\n  signOut(): void;\n}\n\nconst AuthContext = createContext<AuthContextData>({} as AuthContextData);\n\nconst AuthProvider: React.FC = ({ children }) => {\n  const [authData, setAuthData] = useState<AuthData>(() => {\n    const token = localStorage.getItem('@LDTI:token_user');\n    const user = localStorage.getItem('@LDTI:user');\n\n    if (token && user) {\n      return { token, user: JSON.parse(user) };\n    }\n\n    return {} as AuthData;\n  });\n\n  const signIn = useCallback(async ({ username, password }) => {\n    const response = await api.post('login/', {\n      username,\n      password,\n    },{\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Token \"+localStorage.getItem('@LDTI:key')\n      }\n    }); \n\n    const { token, id_usuario} = response.data;\n    const user = username;\n    \n    localStorage.setItem('@LDTI:token_user', token);\n    localStorage.setItem('@LDTI:user', JSON.stringify(user));\n    localStorage.setItem(\"@LDTI:id_user\", id_usuario); \n\n    setAuthData({ token, user });\n  }, []);\n\n  const Forgot = useCallback(async ({ email}) => {\n    const response = await axios.post('https://identoolfier-api.herokuapp.com/rest-auth/password/reset/', {\n      email,\n    },{\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Authorization\": \"Token \"+localStorage.getItem('@LDTI:key')\n      }\n    }); \n  }, []);\n\n  const signOut = useCallback(() => {\n    localStorage.removeItem('@LDTI:token_user');\n    localStorage.removeItem('@LDTI:user');\n    localStorage.removeItem('@LDTI:id_user');\n\n    setAuthData({} as AuthData);\n  }, []);\n\n  return (\n    <AuthContext.Provider value={{ user: authData.user, signIn, signOut, Forgot }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nfunction useAuth(): AuthContextData {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n\n  return context;\n}\n\nexport { AuthProvider, useAuth };\n","/home/guilherme99/Área de Trabalho/template-base/src/services/api.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/Input/index.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/Button/index.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/Button/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/pages/SignIn/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/Input/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/styles/global.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/hooks/index.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/pages/Home/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/Mensagem/index.js",[],["184","185"],"/home/guilherme99/Área de Trabalho/template-base/src/hooks/toast.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/utils/getValidationErrors.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/ToastContainer/index.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/ToastContainer/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/ToastContainer/Toast/index.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/ToastContainer/Toast/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/Navbar/index.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/Navbar/SidebarData.js",["186"],"import * as FaIcons from 'react-icons/fa';\nimport * as AiIcons from 'react-icons/ai';\nimport * as IoIcons from 'react-icons/io';\n\nexport const SideBarData = [\n    {\n        title: 'Home',\n        path: '/home',\n        icon: <AiIcons.AiFillHome/>,\n        cName: 'nav-text'\n    },\n    {\n        title: 'Meu Perfil',\n        path: '/profile',\n        icon: <AiIcons.AiOutlineUser/>,\n        cName: 'nav-text'\n    },\n   /*  {\n        title: 'Atualizar Informações',\n        path: '/update',\n        icon: <AiIcons.AiOutlineUser/>,\n        cName: 'nav-text'\n    }, */\n    {\n        title: 'Histórico',\n        path: '/historic',\n        icon: <IoIcons.IoIosPaper/>,\n        cName: 'nav-text'\n    },\n    /* {\n        title: 'Sobre nós',\n        path: 'https://portalldti.netlify.app/',\n        icon: <FaIcons.FaEnvelope/>,\n        cName: 'nav-text'\n    }, */\n   /*  {\n        title: 'Novo (a) Professor (a)',\n        path: '/newprofessor',\n        icon: <FaIcons.FaChalkboardTeacher/>,\n        cName: 'nav-text'\n        \n    } */\n]\n","/home/guilherme99/Área de Trabalho/template-base/src/components/Navbar/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/pages/Forgoted/index.tsx",["187","188","189"],"import React, { useRef, useCallback, useEffect } from 'react';\nimport { FiLogIn, FiUser, FiLock, FiHome } from 'react-icons/fi';\nimport { Form } from '@unform/web';\nimport { FormHandles } from '@unform/core';\nimport * as Yup from 'yup';\n\nimport { Link, useHistory } from 'react-router-dom';\n\nimport { useAuth } from '../../hooks/auth';\nimport { useToast } from '../../hooks/toast';\n\nimport { Container, Content, Background } from './styles';\nimport getValidationErrors from '../../utils/getValidationErrors';\n\nimport Input from '../../components/Input';\nimport Button from '../../components/Button';\nimport logoImg from './../../assets/ICONEZINHO.png';\nimport axios from 'axios';\nimport { FaEnvelope } from 'react-icons/fa';\n\ninterface ForgotFormData {\n  email: string;\n}\n\nconst Signin: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n\n  const { Forgot } = useAuth();\n  const { addToast } = useToast();\n  const history = useHistory();\n\n  useEffect( () => {\n    (async () => {\n        await axios({\n          method: 'POST',\n          url: 'https://identoolfier-api.herokuapp.com/rest-auth/login/',\n          data:  {\n            \"username\": 'webserver' ,//\n            \"password\": '35ak15qo40cl' //   \n          },\n          headers: {\n            \"Content-Type\": \"application/json\",\n          }\n        })\n          .then((response) => {\n            localStorage.setItem('@LDTI:key', response.data.key);      \n        })\n        .catch((err) => {\n          //handle error\n          console.log(err);\n        });\n    })();\n   \n    return () => {\n     // localStorage.clear();\n    }\n  }, [])\n  \n  const handleSubmit = useCallback(\n    async (data: ForgotFormData) => {\n      try {\n        formRef.current?.setErrors({});\n        const schema = Yup.object().shape({\n          email: Yup.string()\n            .required('E-mail obrigatório')\n            .email('Insira um e-mail válido'),\n        });\n\n        await schema.validate(data, {\n          abortEarly: false, // force return all errors\n        });\n\n        await Forgot({\n          email: data.email\n        });\n\n        addToast({\n          type: 'success',\n          title: 'Recuperação de senha',\n          description: 'Acesse seu e-mail para mais informações.',\n        });\n        \n      } catch (err) {\n        if (err instanceof Yup.ValidationError) {\n          const errors = getValidationErrors(err);\n          formRef.current?.setErrors(errors);\n          return;\n        }\n\n        addToast({\n          type: 'info',\n          title: 'Erro na recuperação.',\n          description: 'Ocorreu um erro ao recuperar sua senha. Tente novamente.',\n        });\n      }\n    },\n    [Forgot, addToast, history],\n  );\n\n  return (\n    <Container>\n      <Content>\n        <img src={logoImg} alt=\"Identoolfier\" />\n        <Form ref={formRef} onSubmit={handleSubmit}>\n          <h1>Recuperar senha</h1>\n          <Input name=\"email\" icon={FaEnvelope} type=\"text\" placeholder=\"Email\" />\n          <Button type=\"submit\">Restaurar</Button>\n          <Link id=\"Create-Account\" to=\"/\">\n            <FiHome /> Tela de Início\n          </Link>\n        </Form>\n        <Link id=\"Create-Account\" to=\"/signup\">\n          <FiLogIn />\n            Criar minha conta\n        </Link>\n      </Content>\n      <Background />\n    </Container>\n  );\n};\n\nexport default Signin;\n","/home/guilherme99/Área de Trabalho/template-base/src/pages/Forgoted/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/pages/SignUp/index.tsx",["190"],"/home/guilherme99/Área de Trabalho/template-base/src/pages/SignUp/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/pages/Historic/index.tsx",["191","192"],"import React, {useEffect, useState} from 'react';\nimport {Styles} from './styles';\nimport axio from 'axios'\nimport \"semantic-ui-css/semantic.min.css\";\nimport { FaTrashAlt, FaSearch,FaCheckCircle} from \"react-icons/fa\";\nimport HeaderLogin from '../../components/Navbar';\nimport Loading from '../../components/Loading';\nimport { useToast } from '../../hooks/toast';\nimport * as IoIcons from 'react-icons/io';\n\ninterface propMatriz {\n  url_imagem: string,\n  analisado: boolean,\n  id: string,\n  ferramenta_registrada: [],\n}\n\n\nconst Historic = ()=> {\n\n   \n  const { addToast } = useToast();\n\n  const  [imagens, setImagens] = useState<Array <propMatriz>>([]);\n  const  [loading, setLoading] = useState<boolean>(false);\n  const  [enable, setEnable] = useState<boolean>(false);\n  const  [previous, setPrevious] = useState<boolean>(false);\n  const  [count, setCount] = useState(1);\n  \n  \n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      const response = await axio({\n        method: 'GET',\n        url: 'https://identoolfier-api.herokuapp.com/app/listar/',\n          headers:{\n            \"Authorization\": \"Token \"+localStorage.getItem(\"@LDTI:token_user\") \n          }\n\n        });\n        const {results} = await response.data;\n\n       setImagens(results);\n       if(response.data.next===null){\n        setEnable(true); \n       }\n       if(response.data.previous===null){\n        setPrevious(true); \n      }\n        \n      \n      setTimeout(() => {\n        setLoading(false);\n      },1500)\n    })();\n      \n    /* return () => {\n      cleanup\n    } */\n  }, []);\n  \n  const analisaImagem = async (event: React.FormEvent, id:any) => {\n\n  event.preventDefault();\n\n  let status: boolean;\n  status = false;\n\n  var idEnvio = new FormData();\n      \n  idEnvio.append(\"id_processo\", id);\n    \n  while(status===false){\n\n    await axio({      \n      method: 'POST',\n      url: 'https://identoolfier-api.herokuapp.com/app/analisa_imagem/',\n      data: idEnvio,\n        headers:{\n          \"Authorization\": \"Token \"+localStorage.getItem(\"@LDTI:token_user\") \n        }\n  \n    }).then(res=> {        \n      status = res.data.analisado; \n\n      if(status===true){\n//        editar(id, dados, status);   */\n        setImagens(imagens.map( (item:propMatriz) => item.id === id ? {...item, ferramenta_registrada:res.data.ferramenta_registrada, analisado:status} : (item)));\n\n        return  addToast({\n          type: 'success',\n          title: `Item ${id}`,\n          description: 'Item identificado!',\n        });\n      }\n    }).catch(err=>\n      status = false\n        \n    )  \n  }\n}\n\n  const deletarImagem = async (event: React.FormEvent, id:any) => {\n    event.preventDefault();\n      await axio({      \n        method: 'DELETE',\n        url: `https://identoolfier-api.herokuapp.com/app/apagar_registro/${id}/`,\n        headers:{\n              \"Authorization\": \"Token \"+localStorage.getItem(\"@LDTI:token_user\") \n        }\n    \n      }).then(res=> {        \n          const resul = imagens.filter(item => item.id!==id);\n          setImagens(resul);\n          return  addToast({\n            type: 'success',\n            title: `Item`,\n            description: 'Item deletado!',\n          });\n      }).catch(err=>{\n        return  addToast({\n          type: 'error',\n          title: `Item`,\n          description: 'Erro ao deletar Item!',\n        });\n      }  \n      )  \n\n  }    \n  \n  const Ferramenta = (value:string) => {\n    const Ferramenta = value.split(\":\");\n    return Ferramenta[1];\n   }\n   const Acuracia = (value:any) => {\n     const Acuracia = value.split(\":\");\n     return Acuracia[0];\n  }\n  \n  const proximoData = async (event:React.FormEvent) => {\n    event.preventDefault();\n\n    setLoading(true);\n    const response = await axio({\n      method: 'GET',\n      url: `https://identoolfier-api.herokuapp.com/app/listar/?page=${1+count}`,\n      headers:{\n        \"Authorization\": \"Token \"+localStorage.getItem(\"@LDTI:token_user\") \n      }\n\n     });\n     let data = await response.data;\n\n     if(data.next){\n        setImagens(data.results);\n        setCount(count+1)\n     }else if(data.next===null){\n      setImagens(data.results);\n      setEnable(true); \n      setCount(count+1)\n     }\n     if(data.previous){\n      setPrevious(false); \n   }\n\n     \n   setLoading(false);\n    \n    \n  }\n\n  const anteriorData = async (event:React.FormEvent) => {\n    event.preventDefault();\n\n    setLoading(true);\n    const response = await axio({\n      method: 'GET',\n      url: `https://identoolfier-api.herokuapp.com/app/listar/?page=${count-1}`,\n      headers:{\n        \"Authorization\": \"Token \"+localStorage.getItem(\"@LDTI:token_user\") \n      }\n\n     });\n     let data = await response.data;\n     \n     if(data.previous){\n      setImagens(data.results);\n      setCount(count-1);\n     }else if(data.previous===null){\n      setImagens(data.results);\n      setPrevious(true);\n      setCount(count-1); \n     }\n\n     if(data.next){\n      setEnable(false); \n    }\n\n    setLoading(false);\n  }\n\n  const orderMatriz = imagens.sort((a, b) => Number(b.id) - Number(a.id));\n  \n  return (\n    \n\n    <Styles>\n        <HeaderLogin/>\n        {\n             loading? <Loading/> : \n          \n            <div className='corpoHome'>\n                <div className='contHome'>\n                    \n                    <div className='artigos'>\n                      <div className=\"Titulo\" id=\"message\"> \n                         <h2> <IoIcons.IoIosPaper/> Histórico de Imagens </h2>\n                      </div>\n                            \n                            \n                            {\n                              imagens.length>0? \n\n                              orderMatriz.map((item:any)=> {\n                                    return (\n                                        <div className='contArt' key={item.id}>\n                                                    \n                                            <article className='cardsImg'>\n                                                <div className='colunaEsq'>\n                                                    <img alt='Ferramenta' src={item.url_imagem} />\n                                                    <div className=\"startfilme\">\n                                                      <h4>{item.ferramenta_registrada? Ferramenta(item.ferramenta_registrada): 'Sem descrição.'}</h4>\n                                                      <i className=\"icon-play icon-3x\"></i>\n                                                  </div>\n                                                </div>\n                                                <div className='colunaDir'>\n                                                    <label> <span className=\"label_infor\">Ferramenta:</span> #{item.id}</label>\n                                                    <div className='contColDir'>\n                                                    <label className=\"campos_artigos\">Status: </label>\n                                                    <label id='stts' className='verificado'>{item.analisado? \"Analisado\" : \"Não Analisado\"}</label> <br></br>\n                                                    <label className=\"campos_artigos\" >Descrição: </label>\n                                                    <label id='desc' className='descricao'>{item.ferramenta_registrada? Ferramenta(item.ferramenta_registrada): 'Sem descrição.'}</label><br></br> \n                                                    {item.ferramenta_registrada? <label className='acuracia'> Acurácia: {item.ferramenta_registrada? (Acuracia(item.ferramenta_registrada)*100).toFixed(2)+\"%\": 'Sem resposta.'} </label> : '' }\n                                                    <div className='btnVer'>\n                                                      \n                                                        <button \n                                                          id='btnLindo2' \n                                                          onClick={item.analisado===true? (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => () => {} : \n                                                                   (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) =>{\n                                                                    /* this.setState({idEnvio:idprocesso}); */\n                                                                    const id = item.id;\n                                                                    analisaImagem(event, id);\n                                                            }}\n                                                          >\n                                                            {item.analisado? `Analisada ` : `Analisar `} \n                                                            {item.analisado?  <FaCheckCircle/> : <FaSearch/> } \n                                                          \n                                                          </button>\n                                                          \n                                                          <button \n                                                                id='btnLindo3' \n                                                                value={item.id}\n                                                                onClick={(event) => {\n                                                                    const id = item.id;\n                                                                    deletarImagem(event, id);\n                                                                }}\n                                                                > \n                                                                Deletar <FaTrashAlt/>\n                                                          </button>\n\n                                                      \n                                                    </div>\n                                                    </div>\n                                                </div>\n                                            </article>\n                                        </div>\n                                  )\n                                })\n\n                            : <h3 style={{textAlign: 'center', color:'#fff'}}>Nenhuma ferramenta encontrada.</h3>\n                          }\n\n                          <div className=\"ppp\">\n                            <button className=\"pag\" onClick={(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => anteriorData(event)} disabled={previous} >Anterior</button>\n                            <button className=\"pag\" onClick={(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => proximoData(event)} disabled={enable} >Próximo</button>\n                          </div>\n                    </div>                      \n\n                </div>\n            </div>\n            }   \n    </Styles>\n  \n  );\n}\n\nexport default Historic;\n","/home/guilherme99/Área de Trabalho/template-base/src/pages/Historic/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/Loading/index.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/Loading/Loading.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/pages/ProfileUser/index.tsx",["193"],"/home/guilherme99/Área de Trabalho/template-base/src/pages/ProfileUser/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/Tooltip/index.tsx",[],"/home/guilherme99/Área de Trabalho/template-base/src/components/Tooltip/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/pages/Update/index.tsx",["194","195","196","197","198"],"import React, { FormEvent, useCallback, useRef } from 'react';\r\nimport { serialize } from 'object-to-formdata';\r\n\r\nimport Header2 from '../../components/Navbar';\r\nimport {Style} from './styles';\r\n\r\nimport axios from 'axios'\r\nimport Logo from './../../assets/ICONEZINHO.png';\r\n\r\nimport  ReactInputMask from \"react-input-mask\";\r\n\r\nimport * as Yup from 'yup';\r\nimport { Form } from '@unform/web';\r\n\r\nimport { FiCalendar, FiLock, FiPhone, FiUser } from 'react-icons/fi';\r\nimport { AiFillRedEnvelope } from 'react-icons/ai';\r\nimport Input from '../../components/Input';\r\nimport Button from '../../components/Button';\r\nimport { FaPlusCircle, FaRegIdCard } from 'react-icons/fa';\r\nimport { useToast } from '../../hooks/toast';\r\nimport { FormHandles } from '@unform/core';\r\nimport { useHistory } from 'react-router-dom';\r\nimport getValidationErrors from '../../utils/getValidationErrors';\r\nimport {\r\n  Grid,\r\n  Header,\r\n  Segment\r\n} from \"semantic-ui-react\";\r\nimport { isUndefined } from 'util';\r\nimport { useAuth } from '../../hooks/auth';\r\n\r\n\r\ninterface UpdateFormData {\r\n  username: string,\r\n  password: string,\r\n  is_active: boolean,\r\n  first_name: string,\r\n  last_name: string,\r\n  email: string,\r\n  fone: string,\r\n  birthdate: string\r\n}\r\n\r\nconst Update:React.FC = () => {\r\n\r\nconst formRef = useRef<FormHandles | any>(null);\r\n\r\nconst { addToast } = useToast();\r\nconst { signIn } = useAuth();\r\n\r\nconst history = useHistory();\r\n\r\nconst handleSubmit = useCallback(\r\n    async (data: UpdateFormData) => {\r\n      try {\r\n        formRef.current?.setErrors({});\r\n        const schema = Yup.object().shape({\r\n          username: Yup.string(),\r\n          first_name: Yup.string(),\r\n          last_name: Yup.string(),\r\n          /* password: Yup.string()\r\n            .min(8, 'Mínimo de 8 caracteres'), */\r\n          email: Yup.string()\r\n            .email('Digite um e-mail válido.'),\r\n          fone: Yup.string(),\r\n          birthdate: Yup.string()\r\n          \r\n        });\r\n\r\n        let values = {}\r\n        \r\n        if(data.username!==''){\r\n          values = {...values,\r\n            username: data.username\r\n          }\r\n        }\r\n        if(data.first_name!=='' ){\r\n          values = {...values,\r\n            first_name: data.first_name\r\n          }\r\n         \r\n        }\r\n        if(data.last_name!==''){\r\n          values = {...values,\r\n            last_name: data.last_name\r\n          }\r\n         \r\n        }\r\n        if(data.email!==''){\r\n          values = {...values,\r\n            email: data.email\r\n          }\r\n        }\r\n        if(data.fone!==''){\r\n          values = {...values,\r\n            fone: (data.fone.replace(/[^\\d]+/g,''))\r\n          }\r\n        }\r\n        if(data.birthdate!==''){\r\n          values = {...values,\r\n            birthdate: (data.birthdate.split('/').reverse().join('-'))\r\n          }\r\n        }\r\n\r\n        if (Object.keys(values).length === 0) {\r\n          return addToast({\r\n            type: 'info',\r\n            title: 'Nenhum valor!',\r\n            description: 'Erro ao atualizar!',\r\n          });\r\n\r\n        }\r\n        await schema.validate(values, {\r\n          abortEarly: false, // force return all errors\r\n        });\r\n\r\n        console.log(JSON.stringify(values))\r\n\r\n        await axios({\r\n          method: 'PATCH',\r\n          url: 'https://identoolfier-api.herokuapp.com/api/atualizar/'+localStorage.getItem(\"@LDTI:id_user\")+'/',\r\n          data: JSON.stringify(values),\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            \"Authorization\": \"Token \"+localStorage.getItem('@LDTI:key')\r\n          }\r\n        })\r\n          .then(async(response) => {\r\n            addToast({\r\n              type: 'success',\r\n              title: 'Dados atualizados!',\r\n              description: 'Dados atualizados com sucesso!',\r\n            });\r\n\r\n\r\n            localStorage.setItem(\"@LDTI:user\", data.username);\r\n            setTimeout(() => {\r\n                history.push('/home');  \r\n            }, 5000);\r\n           \r\n          })\r\n          .catch((err) => {\r\n            addToast({\r\n              type: 'error',\r\n              title: 'Cadastro',\r\n              description: 'Erro ao Atualizar.',\r\n            });\r\n          });    \r\n     } catch (err) {\r\n          if (err instanceof Yup.ValidationError) {\r\n            const errors = getValidationErrors(err);\r\n            formRef.current?.setErrors(errors);\r\n            return;\r\n          }\r\n  \r\n          addToast({\r\n            type: 'error',\r\n            title: 'Erro na alteração',\r\n            description: 'Ocorreu um erro ao atualizar.',\r\n          }); \r\n        } \r\n\r\n      \r\n    },[ signIn, addToast, history],\r\n  ); \r\n\r\n  return (\r\n    <Style>\r\n        \r\n     <Header2 />\r\n\r\n     <div id='form2'>\r\n        <div id=\"sub-form2\" >\r\n\r\n        <Grid textAlign=\"center\" verticalAlign=\"middle\" className=\"grid_principal\" style={{color: 'teal'}}>\r\n          <Grid.Column >\r\n            <Header as=\"h2\" color=\"teal\" textAlign=\"center\"> \r\n              <img src={Logo} alt=\"logo\" className=\"image\" />{\" \"}\r\n              Atualize seus dados. \r\n            </Header>\r\n            Obs: Preencha somente os campos que necessita atualizar.\r\n            <Form ref={formRef} onSubmit={handleSubmit} className=\"form_cad\">\r\n              <Segment className=\"columns\"> \r\n                <Segment className=\"grids\">\r\n                  <h4><FaRegIdCard/> Informações do Usuário</h4>\r\n                  <Input\r\n                    icon={FaRegIdCard}\r\n                    type=\"text\"\r\n                    placeholder=\"* Nome\"\r\n                    name=\"first_name\"\r\n                    id=\"first_name\"\r\n                  />\r\n                  <Input\r\n                    icon={FaRegIdCard}\r\n                    type=\"text\"\r\n                    placeholder=\"* Sobrenome\"\r\n                    name=\"last_name\"\r\n                    id=\"last_name\"\r\n                  />\r\n                  <Input\r\n                    icon={FiUser}\r\n                    type=\"text\"\r\n                    placeholder=\"* Nome de Usuário\"\r\n                    name=\"username\"\r\n                    id=\"username\"\r\n                  />\r\n                </Segment>\r\n\r\n                <Segment className=\"grids\">\r\n                  <h4><FaPlusCircle/> Informações adicionais</h4>\r\n                  {/* <Input\r\n                    name=\"password\"\r\n                    icon={FiLock}\r\n                    type=\"password\"\r\n                    placeholder=\"Senha\"\r\n                    autoComplete=\"on\"\r\n                    \r\n                  /> */}\r\n                  \r\n                  <Input              \r\n                      icon={AiFillRedEnvelope}              \r\n                      placeholder=\"* E-mail \"\r\n                      name=\"email\"\r\n                      id=\"email\"\r\n                    />\r\n                  <ReactInputMask mask=\"99/99/9999\">\r\n                    {(_: JSX.IntrinsicAttributes) =>  \r\n                      <Input                \r\n                      icon={FiCalendar}                \r\n                      placeholder=\"dd/mm/yyyy\"\r\n                      name=\"birthdate\"\r\n                      id=\"birthdate\"\r\n                    />}\r\n                </ReactInputMask>\r\n                <ReactInputMask mask=\"(99) 99999-9999\">\r\n                    {(_: JSX.IntrinsicAttributes) =>  \r\n                      <Input                \r\n                      icon={FiPhone}                \r\n                      placeholder=\"(00) 0000-0000\"\r\n                      name=\"fone\"\r\n                      id=\"fone\"\r\n                    />}\r\n                </ReactInputMask>\r\n                  \r\n                </Segment>          \r\n              </Segment>\r\n              <Segment className=\"columns\" id=\"buttonConfirm\"> \r\n                <Button type=\"submit\">Atualizar</Button>\r\n              </Segment>\r\n            </Form>\r\n          </Grid.Column>\r\n        </Grid>\r\n\r\n          </div>  \r\n        </div>\r\n      </Style>\r\n    );\r\n  }\r\nexport default Update;\r\n","/home/guilherme99/Área de Trabalho/template-base/src/pages/Update/styles.ts",[],"/home/guilherme99/Área de Trabalho/template-base/src/pages/Welcome/index.tsx",["199","200"],"/home/guilherme99/Área de Trabalho/template-base/src/pages/Welcome/styles.ts",[],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":213,"column":15,"nodeType":"207","messageId":"208","endLine":223,"endColumn":8},{"ruleId":"205","severity":1,"message":"209","line":223,"column":16,"nodeType":"207","messageId":"208","endLine":224,"endColumn":23},{"ruleId":"210","severity":1,"message":"211","line":1,"column":49,"nodeType":"212","messageId":"213","endLine":1,"endColumn":57},{"ruleId":"210","severity":1,"message":"214","line":62,"column":11,"nodeType":"212","messageId":"213","endLine":62,"endColumn":19},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"215","severity":1,"message":"216","line":1,"column":13,"nodeType":"212","messageId":"213","endLine":1,"endColumn":20},{"ruleId":"210","severity":1,"message":"217","line":2,"column":19,"nodeType":"212","messageId":"213","endLine":2,"endColumn":25},{"ruleId":"210","severity":1,"message":"218","line":2,"column":27,"nodeType":"212","messageId":"213","endLine":2,"endColumn":33},{"ruleId":"219","severity":1,"message":"220","line":97,"column":5,"nodeType":"221","endLine":97,"endColumn":32,"suggestions":"222"},{"ruleId":"210","severity":1,"message":"211","line":1,"column":49,"nodeType":"212","messageId":"213","endLine":1,"endColumn":57},{"ruleId":"205","severity":1,"message":"206","line":84,"column":13,"nodeType":"207","messageId":"208","endLine":97,"endColumn":6},{"ruleId":"205","severity":1,"message":"209","line":97,"column":14,"nodeType":"207","messageId":"208","endLine":98,"endColumn":21},{"ruleId":"210","severity":1,"message":"223","line":6,"column":9,"nodeType":"212","messageId":"213","endLine":6,"endColumn":19},{"ruleId":"210","severity":1,"message":"224","line":1,"column":17,"nodeType":"212","messageId":"213","endLine":1,"endColumn":26},{"ruleId":"210","severity":1,"message":"225","line":2,"column":10,"nodeType":"212","messageId":"213","endLine":2,"endColumn":19},{"ruleId":"210","severity":1,"message":"218","line":15,"column":22,"nodeType":"212","messageId":"213","endLine":15,"endColumn":28},{"ruleId":"210","severity":1,"message":"226","line":29,"column":10,"nodeType":"212","messageId":"213","endLine":29,"endColumn":21},{"ruleId":"219","severity":1,"message":"227","line":164,"column":7,"nodeType":"221","endLine":164,"endColumn":35,"suggestions":"228"},{"ruleId":"210","severity":1,"message":"229","line":3,"column":8,"nodeType":"212","messageId":"213","endLine":3,"endColumn":12},{"ruleId":"210","severity":1,"message":"230","line":5,"column":21,"nodeType":"212","messageId":"213","endLine":5,"endColumn":32},"no-native-reassign",["231"],"no-negated-in-lhs",["232"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'status', 'status', 'status'.","ArrowFunctionExpression","unsafeRefs","Function declared in a loop contains unsafe references to variable(s) 'status'.","@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","no-unused-vars","'FaIcons' is defined but never used.","'FiUser' is defined but never used.","'FiLock' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has an unnecessary dependency: 'history'. Either exclude it or remove the dependency array.","ArrayExpression",["233"],"'useHistory' is defined but never used.","'FormEvent' is defined but never used.","'serialize' is defined but never used.","'isUndefined' is defined but never used.","React Hook useCallback has an unnecessary dependency: 'signIn'. Either exclude it or remove the dependency array.",["234"],"'Logo' is defined but never used.","'FaInstagram' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"235","fix":"236"},{"desc":"237","fix":"238"},"Update the dependencies array to be: [Forgot, addToast]",{"range":"239","text":"240"},"Update the dependencies array to be: [addToast, history]",{"range":"241","text":"242"},[2656,2683],"[Forgot, addToast]",[4606,4634],"[addToast, history]"]